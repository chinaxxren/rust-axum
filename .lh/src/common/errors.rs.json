{
    "sourceFile": "src/common/errors.rs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1730637748770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730637862811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,114 +1,107 @@\n+use axum::http::StatusCode;\n+use axum::response::{IntoResponse, Response};\n use axum::Json;\n-use axum::{http::StatusCode, response::IntoResponse};\n-use serde::Serialize;\n-use std::collections::HashMap;\n-#[derive(Debug, Clone)]\n-pub enum BusinessError {\n-    InternalServerError((Option<String>, Option<HashMap<String, String>>)),\n-    SkuAlreadyExists((Option<String>, Option<HashMap<String, String>>)),\n-    InvalidParameter((Option<String>, Option<Vec<HashMap<String, String>>>)),\n-    SkuNotFound((Option<String>, Option<HashMap<String, String>>)),\n-    QuestionNotFound((Option<String>, Option<HashMap<String, String>>)),\n-    DivedByCannotBe0((Option<String>, Option<HashMap<String, String>>)),\n-}\n+use bcrypt::BcryptError;\n+use serde_json::json;\n+use tokio::task::JoinError;\n+use wither::bson;\n+use wither::mongodb::error::Error as MongoError;\n+use wither::WitherError;\n \n-#[derive(Serialize)]\n-pub struct Resp<D: Serialize, E: Serialize> {\n-    pub code: String,\n-    pub msg: String,\n-    pub success: bool,\n-    pub error_parameters: Option<E>,\n-    pub data: Option<D>,\n-}\n+#[derive(thiserror::Error, Debug)]\n+#[error(\"...\")]\n+pub enum Error {\n+    #[error(\"{0}\")]\n+    Wither(#[from] WitherError),\n \n-impl<D, E> Resp<D, E>\n-where\n-    D: Serialize,\n-    E: Serialize,\n-{\n-    fn new(\n-        code: String,\n-        msg: String,\n-        success: bool,\n-        data: Option<D>,\n-        error_parameters: Option<E>,\n-    ) -> Self {\n-        Self {\n-            code,\n-            msg,\n-            success,\n-            data,\n-            error_parameters,\n-        }\n-    }\n-    pub fn ok(code: String, msg: String, success: bool, data: Option<D>) -> Self {\n-        Self::new(code, msg, success, data, None)\n-    }\n-    pub fn err(code: String, msg: String, error_parameters: Option<E>) -> Self {\n-        Self::new(code, msg, false, None, error_parameters)\n-    }\n+    #[error(\"{0}\")]\n+    Mongo(#[from] MongoError),\n+\n+    #[error(\"Error parsing ObjectID {0}\")]\n+    ParseObjectID(String),\n+\n+    #[error(\"{0}\")]\n+    SerializeMongoResponse(#[from] bson::de::Error),\n+\n+    #[error(\"{0}\")]\n+    Authenticate(#[from] AuthenticateError),\n+\n+    #[error(\"{0}\")]\n+    BadRequest(#[from] BadRequest),\n+\n+    #[error(\"{0}\")]\n+    NotFound(#[from] NotFound),\n+\n+    #[error(\"{0}\")]\n+    RunSyncTask(#[from] JoinError),\n+\n+    #[error(\"{0}\")]\n+    HashPassword(#[from] BcryptError),\n }\n \n-impl IntoResponse for BusinessError {\n-    fn into_response(self) -> axum::response::Response {\n-        let code = self.code();\n-        let default_message = self.msg();\n-        match self {\n-            BusinessError::InternalServerError((message, error_parameters))\n-            | BusinessError::SkuAlreadyExists((message, error_parameters))\n-            | BusinessError::SkuNotFound((message, error_parameters))\n-            | BusinessError::QuestionNotFound((message, error_parameters))\n-            | BusinessError::DivedByCannotBe0((message, error_parameters)) => {\n-                let into_response_tuple: Resp<String, HashMap<String, String>> =\n-                    Resp::err(code, message.unwrap_or(default_message), error_parameters);\n-                Json(into_response_tuple).into_response()\n+impl Error {\n+    fn get_codes(&self) -> (StatusCode, u16) {\n+        match *self {\n+            // 4XX Errors\n+            Error::ParseObjectID(_) => (StatusCode::BAD_REQUEST, 40001),\n+            Error::BadRequest(_) => (StatusCode::BAD_REQUEST, 40002),\n+            Error::NotFound(_) => (StatusCode::NOT_FOUND, 40003),\n+            Error::Authenticate(AuthenticateError::WrongCredentials) => {\n+                (StatusCode::UNAUTHORIZED, 40004)\n             }\n-            BusinessError::InvalidParameter((message, error_parameters)) => {\n-                let into_response_tuple: Resp<String, Vec<HashMap<String, String>>> =\n-                    Resp::err(code, message.unwrap_or(default_message), error_parameters);\n-                Json(into_response_tuple).into_response()\n+            Error::Authenticate(AuthenticateError::InvalidToken) => {\n+                (StatusCode::UNAUTHORIZED, 40005)\n             }\n+            Error::Authenticate(AuthenticateError::Locked) => (StatusCode::LOCKED, 40006),\n+\n+            // 5XX Errors\n+            Error::Authenticate(AuthenticateError::TokenCreation) => {\n+                (StatusCode::INTERNAL_SERVER_ERROR, 5001)\n+            }\n+            Error::Wither(_) => (StatusCode::INTERNAL_SERVER_ERROR, 5002),\n+            Error::Mongo(_) => (StatusCode::INTERNAL_SERVER_ERROR, 5003),\n+            Error::SerializeMongoResponse(_) => (StatusCode::INTERNAL_SERVER_ERROR, 5004),\n+            Error::RunSyncTask(_) => (StatusCode::INTERNAL_SERVER_ERROR, 5005),\n+            Error::HashPassword(_) => (StatusCode::INTERNAL_SERVER_ERROR, 5006),\n         }\n     }\n-}\n \n-impl BusinessError {\n-    pub fn status_code(&self) -> StatusCode {\n-        match self {\n-            Self::InternalServerError(_) => StatusCode::INTERNAL_SERVER_ERROR,\n-            _ => StatusCode::OK,\n-        }\n+    pub fn bad_request() -> Self {\n+        Error::BadRequest(BadRequest {})\n     }\n-    pub fn code(&self) -> String {\n-        match self {\n-            Self::InternalServerError(_) => \"500\".to_string(),\n-            Self::InvalidParameter(_) => \"1399001\".to_string(),\n-            Self::SkuAlreadyExists(_) => \"0201021\".to_string(),\n-            Self::SkuNotFound(_) => \"0201022\".to_string(),\n-            Self::QuestionNotFound(_) => \"1301002\".to_string(),\n-            Self::DivedByCannotBe0(_) => \"1301003\".to_string(),\n-        }\n+\n+    pub fn not_found() -> Self {\n+        Error::NotFound(NotFound {})\n     }\n-    pub fn msg(&self) -> String {\n-        match self {\n-            Self::InternalServerError(_) => \"程序内部处理错误\".to_string(),\n-            Self::InvalidParameter(_) => \"参数校验异常\".to_string(),\n-            Self::SkuAlreadyExists(_) => \"商品已存在\".to_string(),\n-            Self::SkuNotFound(_) => \"商品找不到\".to_string(),\n-            Self::QuestionNotFound(_) => \"找不到对应的问题记录\".to_string(),\n-            Self::DivedByCannotBe0(_) => \"除数不能为0\".to_string(),\n-        }\n-    }\n }\n \n-impl From<sqlx::Error> for BusinessError {\n-    fn from(error: sqlx::Error) -> Self {\n-        BusinessError::InternalServerError((Some(error.to_string()), None))\n+impl IntoResponse for Error {\n+    fn into_response(self) -> Response {\n+        let (status_code, code) = self.get_codes();\n+        let message = self.to_string();\n+        let body = Json(json!({ \"code\": code, \"message\": message }));\n+\n+        (status_code, body).into_response()\n     }\n }\n \n-impl From<serde_json::Error> for BusinessError {\n-    fn from(error: serde_json::Error) -> Self {\n-        BusinessError::InternalServerError((Some(error.to_string()), None))\n-    }\n+#[derive(thiserror::Error, Debug)]\n+#[error(\"...\")]\n+pub enum AuthenticateError {\n+    #[error(\"Wrong authentication credentials\")]\n+    WrongCredentials,\n+    #[error(\"Failed to create authentication token\")]\n+    TokenCreation,\n+    #[error(\"Invalid authentication credentials\")]\n+    InvalidToken,\n+    #[error(\"User is locked\")]\n+    Locked,\n }\n+\n+#[derive(thiserror::Error, Debug)]\n+#[error(\"Bad Request\")]\n+pub struct BadRequest {}\n+\n+#[derive(thiserror::Error, Debug)]\n+#[error(\"Not found\")]\n+pub struct NotFound {}\n"
                },
                {
                    "date": 1730637872401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n use axum::http::StatusCode;\n use axum::response::{IntoResponse, Response};\n use axum::Json;\n-use bcrypt::BcryptError;\n use serde_json::json;\n use tokio::task::JoinError;\n use wither::bson;\n use wither::mongodb::error::Error as MongoError;\n"
                },
                {
                    "date": 1730637884577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,18 +2,15 @@\n use axum::response::{IntoResponse, Response};\n use axum::Json;\n use serde_json::json;\n use tokio::task::JoinError;\n-use wither::bson;\n-use wither::mongodb::error::Error as MongoError;\n-use wither::WitherError;\n \n+\n #[derive(thiserror::Error, Debug)]\n #[error(\"...\")]\n pub enum Error {\n-    #[error(\"{0}\")]\n-    Wither(#[from] WitherError),\n \n+\n     #[error(\"{0}\")]\n     Mongo(#[from] MongoError),\n \n     #[error(\"Error parsing ObjectID {0}\")]\n"
                },
                {
                    "date": 1730637896731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,11 +8,10 @@\n #[derive(thiserror::Error, Debug)]\n #[error(\"...\")]\n pub enum Error {\n \n-\n     #[error(\"{0}\")]\n-    Mongo(#[from] MongoError),\n+    Mongo(#[from] s),\n \n     #[error(\"Error parsing ObjectID {0}\")]\n     ParseObjectID(String),\n \n"
                },
                {
                    "date": 1730637911341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,17 +9,14 @@\n #[error(\"...\")]\n pub enum Error {\n \n     #[error(\"{0}\")]\n-    Mongo(#[from] s),\n+    Mongo(#[from] sqlx::Error),\n \n     #[error(\"Error parsing ObjectID {0}\")]\n     ParseObjectID(String),\n \n     #[error(\"{0}\")]\n-    SerializeMongoResponse(#[from] bson::de::Error),\n-\n-    #[error(\"{0}\")]\n     Authenticate(#[from] AuthenticateError),\n \n     #[error(\"{0}\")]\n     BadRequest(#[from] BadRequest),\n"
                },
                {
                    "date": 1730637946592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,8 @@\n             // 5XX Errors\n             Error::Authenticate(AuthenticateError::TokenCreation) => {\n                 (StatusCode::INTERNAL_SERVER_ERROR, 5001)\n             }\n-            Error::Wither(_) => (StatusCode::INTERNAL_SERVER_ERROR, 5002),\n             Error::Mongo(_) => (StatusCode::INTERNAL_SERVER_ERROR, 5003),\n             Error::SerializeMongoResponse(_) => (StatusCode::INTERNAL_SERVER_ERROR, 5004),\n             Error::RunSyncTask(_) => (StatusCode::INTERNAL_SERVER_ERROR, 5005),\n             Error::HashPassword(_) => (StatusCode::INTERNAL_SERVER_ERROR, 5006),\n"
                },
                {
                    "date": 1730637970173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,11 +25,8 @@\n     NotFound(#[from] NotFound),\n \n     #[error(\"{0}\")]\n     RunSyncTask(#[from] JoinError),\n-\n-    #[error(\"{0}\")]\n-    HashPassword(#[from] BcryptError),\n }\n \n impl Error {\n     fn get_codes(&self) -> (StatusCode, u16) {\n@@ -50,9 +47,8 @@\n             Error::Authenticate(AuthenticateError::TokenCreation) => {\n                 (StatusCode::INTERNAL_SERVER_ERROR, 5001)\n             }\n             Error::Mongo(_) => (StatusCode::INTERNAL_SERVER_ERROR, 5003),\n-            Error::SerializeMongoResponse(_) => (StatusCode::INTERNAL_SERVER_ERROR, 5004),\n             Error::RunSyncTask(_) => (StatusCode::INTERNAL_SERVER_ERROR, 5005),\n             Error::HashPassword(_) => (StatusCode::INTERNAL_SERVER_ERROR, 5006),\n         }\n     }\n"
                },
                {
                    "date": 1730637985051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,8 @@\n                 (StatusCode::INTERNAL_SERVER_ERROR, 5001)\n             }\n             Error::Mongo(_) => (StatusCode::INTERNAL_SERVER_ERROR, 5003),\n             Error::RunSyncTask(_) => (StatusCode::INTERNAL_SERVER_ERROR, 5005),\n-            Error::HashPassword(_) => (StatusCode::INTERNAL_SERVER_ERROR, 5006),\n         }\n     }\n \n     pub fn bad_request() -> Self {\n"
                },
                {
                    "date": 1730638018439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n #[error(\"...\")]\n pub enum Error {\n \n     #[error(\"{0}\")]\n-    Mongo(#[from] sqlx::Error),\n+    S(#[from] sqlx::Error),\n \n     #[error(\"Error parsing ObjectID {0}\")]\n     ParseObjectID(String),\n \n"
                },
                {
                    "date": 1730638040905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n #[error(\"...\")]\n pub enum Error {\n \n     #[error(\"{0}\")]\n-    S(#[from] sqlx::Error),\n+    DBError(#[from] sqlx::Error),\n \n     #[error(\"Error parsing ObjectID {0}\")]\n     ParseObjectID(String),\n \n@@ -46,9 +46,9 @@\n             // 5XX Errors\n             Error::Authenticate(AuthenticateError::TokenCreation) => {\n                 (StatusCode::INTERNAL_SERVER_ERROR, 5001)\n             }\n-            Error::Mongo(_) => (StatusCode::INTERNAL_SERVER_ERROR, 5003),\n+            Error::DBError(_) => (StatusCode::INTERNAL_SERVER_ERROR, 5003),\n             Error::RunSyncTask(_) => (StatusCode::INTERNAL_SERVER_ERROR, 5005),\n         }\n     }\n \n"
                },
                {
                    "date": 1730638059169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,13 +3,11 @@\n use axum::Json;\n use serde_json::json;\n use tokio::task::JoinError;\n \n-\n #[derive(thiserror::Error, Debug)]\n #[error(\"...\")]\n pub enum Error {\n-\n     #[error(\"{0}\")]\n     DBError(#[from] sqlx::Error),\n \n     #[error(\"Error parsing ObjectID {0}\")]\n"
                }
            ],
            "date": 1730637748770,
            "name": "Commit-0",
            "content": "use axum::Json;\nuse axum::{http::StatusCode, response::IntoResponse};\nuse serde::Serialize;\nuse std::collections::HashMap;\n#[derive(Debug, Clone)]\npub enum BusinessError {\n    InternalServerError((Option<String>, Option<HashMap<String, String>>)),\n    SkuAlreadyExists((Option<String>, Option<HashMap<String, String>>)),\n    InvalidParameter((Option<String>, Option<Vec<HashMap<String, String>>>)),\n    SkuNotFound((Option<String>, Option<HashMap<String, String>>)),\n    QuestionNotFound((Option<String>, Option<HashMap<String, String>>)),\n    DivedByCannotBe0((Option<String>, Option<HashMap<String, String>>)),\n}\n\n#[derive(Serialize)]\npub struct Resp<D: Serialize, E: Serialize> {\n    pub code: String,\n    pub msg: String,\n    pub success: bool,\n    pub error_parameters: Option<E>,\n    pub data: Option<D>,\n}\n\nimpl<D, E> Resp<D, E>\nwhere\n    D: Serialize,\n    E: Serialize,\n{\n    fn new(\n        code: String,\n        msg: String,\n        success: bool,\n        data: Option<D>,\n        error_parameters: Option<E>,\n    ) -> Self {\n        Self {\n            code,\n            msg,\n            success,\n            data,\n            error_parameters,\n        }\n    }\n    pub fn ok(code: String, msg: String, success: bool, data: Option<D>) -> Self {\n        Self::new(code, msg, success, data, None)\n    }\n    pub fn err(code: String, msg: String, error_parameters: Option<E>) -> Self {\n        Self::new(code, msg, false, None, error_parameters)\n    }\n}\n\nimpl IntoResponse for BusinessError {\n    fn into_response(self) -> axum::response::Response {\n        let code = self.code();\n        let default_message = self.msg();\n        match self {\n            BusinessError::InternalServerError((message, error_parameters))\n            | BusinessError::SkuAlreadyExists((message, error_parameters))\n            | BusinessError::SkuNotFound((message, error_parameters))\n            | BusinessError::QuestionNotFound((message, error_parameters))\n            | BusinessError::DivedByCannotBe0((message, error_parameters)) => {\n                let into_response_tuple: Resp<String, HashMap<String, String>> =\n                    Resp::err(code, message.unwrap_or(default_message), error_parameters);\n                Json(into_response_tuple).into_response()\n            }\n            BusinessError::InvalidParameter((message, error_parameters)) => {\n                let into_response_tuple: Resp<String, Vec<HashMap<String, String>>> =\n                    Resp::err(code, message.unwrap_or(default_message), error_parameters);\n                Json(into_response_tuple).into_response()\n            }\n        }\n    }\n}\n\nimpl BusinessError {\n    pub fn status_code(&self) -> StatusCode {\n        match self {\n            Self::InternalServerError(_) => StatusCode::INTERNAL_SERVER_ERROR,\n            _ => StatusCode::OK,\n        }\n    }\n    pub fn code(&self) -> String {\n        match self {\n            Self::InternalServerError(_) => \"500\".to_string(),\n            Self::InvalidParameter(_) => \"1399001\".to_string(),\n            Self::SkuAlreadyExists(_) => \"0201021\".to_string(),\n            Self::SkuNotFound(_) => \"0201022\".to_string(),\n            Self::QuestionNotFound(_) => \"1301002\".to_string(),\n            Self::DivedByCannotBe0(_) => \"1301003\".to_string(),\n        }\n    }\n    pub fn msg(&self) -> String {\n        match self {\n            Self::InternalServerError(_) => \"程序内部处理错误\".to_string(),\n            Self::InvalidParameter(_) => \"参数校验异常\".to_string(),\n            Self::SkuAlreadyExists(_) => \"商品已存在\".to_string(),\n            Self::SkuNotFound(_) => \"商品找不到\".to_string(),\n            Self::QuestionNotFound(_) => \"找不到对应的问题记录\".to_string(),\n            Self::DivedByCannotBe0(_) => \"除数不能为0\".to_string(),\n        }\n    }\n}\n\nimpl From<sqlx::Error> for BusinessError {\n    fn from(error: sqlx::Error) -> Self {\n        BusinessError::InternalServerError((Some(error.to_string()), None))\n    }\n}\n\nimpl From<serde_json::Error> for BusinessError {\n    fn from(error: serde_json::Error) -> Self {\n        BusinessError::InternalServerError((Some(error.to_string()), None))\n    }\n}\n"
        }
    ]
}